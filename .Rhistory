dim(GSSc)
barplot(table(GSSc$partyid), xlab="partyid", col = c("blue", "red"))
barplot(table(GSSc$age), xlab="age")
barplot(table(GSSc$sex), xlab="sex")
barplot(table(GSSc$race), xlab="race")
barplot(table(GSSc$degree), xlab="degree")
barplot(table(GSSc$attend), xlab="church attendance")
barplot(table(GSSc$coldeg1), xlab="school")
dim(GSSc)
View(GSSc)
party.glm <- glm((partyid=="Republican") ~  age + sex + race + degree + attend, data = GSSc, family = binomial)
summary(party.glm)
library(ResourceSelection)
GSS <- read.table("~/Desktop/Math 325 Notebook/Data/GSS2012.csv", header=TRUE, quote="\"")
GSSc <- GSS[,c("partyid", "age", "sex", "race", "degree", "attend")]
GSSc$sex <- as.factor(GSSc$sex)
GSSc$race <- as.factor(GSSc$race)
GSSc$degree <- as.factor(GSSc$degree)
GSSc$attend <- as.factor(GSSc$attend)
GSSc$partyid <- as.factor(GSSc$partyid)
GSSc <- subset(GSSc, partyid %in% 1:7)
levels(GSSc$partyid) <- list(Democrat = c(0, 1, 2), Republican = c(4, 5, 6))
GSSc <- subset(GSSc, partyid %in% c("Democrat","Republican"))
dim(GSSc)
GSSc <- subset(GSSc, degree %in% 0:4)
dim(GSSc)
GSSc <- subset(GSSc, attend %in% 0:8)
dim(GSSc)
barplot(table(GSSc$partyid), xlab="partyid", col = c("blue", "red"))
barplot(table(GSSc$age), xlab="age")
barplot(table(GSSc$sex), xlab="sex")
barplot(table(GSSc$race), xlab="race")
barplot(table(GSSc$degree), xlab="degree")
barplot(table(GSSc$attend), xlab="church attendance")
barplot(table(GSSc$coldeg1), xlab="school")
barplot(table(GSSc$attend), xlab="church attendance")
dim(GSSc)
View(GSSc)
party.glm <- glm((partyid=="Republican") ~  age + sex + race + degree + attend, data = GSSc, family = binomial)
summary(party.glm)
barplot(table(GSSc$degree), xlab="degree")
hoslem.test(party.glm$y, party.glm$fitted)
predict(party.glm, data.frame(attend==8))
predict(party.glm, data.frame(attend==8), type = "response")
predict(party.glm, data.frame(attend=8), type = "response")
predict(party.glm, data.frame(attend=8, age=22, sex=1, race=1, degree=4), type = "response")
exp(-.30321 - .01713x -0.71595)/1 + exp(-.30321 - .01713x -0.71595)
exp(-.30321 - .01713*x -0.71595)/1 + exp(-.30321 - .01713x -0.71595)
exp(-.30321 - .01713*x -0.71595)/(1 + exp(-.30321 - .01713x -0.71595))
exp(-.30321 - .01713*x -0.71595)/(1 + exp(-.30321 - .01713x -0.71595))
exp(-.30321 - .01713*x -0.71595)/(1 + exp(-.30321 - .01713x -0.71595))
exp(-.30321 + .01713 -0.71595)/(1 + exp(-.30321 - .01713x -0.71595))
exp(-.30321 + .01713 - 0.71595)/(1 + exp(-.30321 - .01713x -0.71595))
exp(-.30321 + .01713*x - 0.71595)/(1 + exp(-.30321 - .01713*x -0.71595))
View(mtcars)
cars.glm <-(vs ~ wt + am, data=mtcars, family=binomial)
cars.glm <-glm(vs ~ wt + am, data=mtcars, family=binomial)
summary(cars.glm)
plot(vs ~ wt, data = mtcars, pch=16, cex=0.5, xlim=c(0,100))
plot(vs ~ wt, data = mtcars, pch=16, cex=0.5, xlim=c(5,20))
plot(vs ~ wt, data = mtcars, pch=16, cex=0.5, xlim=c(5,20))
plot(vs ~ wt, data = mtcars, pch=16, cex=0.5, xlim=c(0,20))
plot(vs ~ wt, data = mtcars, pch=16, cex=0.5, xlim=c(3,8))
plot(vs ~ wt, data = mtcars, pch=16, cex=0.5, xlim=c(2,6))
curve(exp(21.751-6.330*x)/(1 + exp(21.751-6.330*x)))
curve(exp(21.751-6.330*x)/(1 + exp(21.751-6.330*x)), add = T)
plot(vs ~ wt, data = mtcars, pch=16, cex=0.5, xlim=c(2,6))
curve(exp(21.751-6.330*x)/(1 + exp(21.751-6.330*x)), add = T)
curve(exp(21.751-6.330*x)/(1 + exp(21.751-6.330*x)), add = T, col="firebrick")
curve(exp(21.751-6.330*x - 6.133))/(1 + exp(21.751-6.330*x - 6.133), add = T, col='skyblue')
curve(exp(21.751-6.330*x - 6.133)/(1 + exp(21.751-6.330*x - 6.133))), add = T, col='skyblue')
curve(exp(21.751-6.330*x - 6.133)/(1 + exp(21.751-6.330*x - 6.133)), add = T, col='skyblue')
curve(exp(21.751-6.330 - 6.133*x)/(1 + exp(21.751-6.330 - 6.133*x)), add = T, col='skyblue')
curve(exp(21.751 - 6.133 -6.330*x)/(1 + exp(21.751-6.330 - 6.133*x)), add = T, col='skyblue')
cars.glm <-glm(vs ~ wt + am, data=mtcars, family=binomial)
summary(cars.glm)
plot(vs ~ wt, data = mtcars, pch=16, cex=0.5, xlim=c(1,6))
curve(exp(21.751-6.330*x)/(1 + exp(21.751-6.330*x)), add = T, col="firebrick")
curve(exp(21.751 - 6.133 -6.330*x)/(1 + exp(21.751-6.330 - 6.133*x)), add = T, col='skyblue')
plot(vs ~ wt, data = mtcars, pch=16, cex=0.5, xlim=c(1,6))
curve(exp(21.751-6.330*x)/(1 + exp(21.751-6.330*x)), add = T, col="firebrick")
curve(exp(21.751 - 6.133 -6.330*x)/(1 + exp(21.751-6.133 - 6.330*x)), add = T, col='skyblue')
legend("bottomright", legend=paste("WT ==", 2:6))
plot(vs ~ wt, data = mtcars, pch=16, cex=0.5, xlim=c(1,6))
curve(exp(21.751-6.330*x)/(1 + exp(21.751-6.330*x)), add = T, col="firebrick")
curve(exp(21.751 - 6.133 -6.330*x)/(1 + exp(21.751-6.133 - 6.330*x)), add = T, col='skyblue')
newdata <- data.frame(age=25, sex=1, race=1, degree=3, attend=7)
newdata$sex <- as.factor(newdata$sex)
newdata$race <- as.factor(newdata$race)
newdata$degree <- as.factor(newdata$degree)
newdata$attend <- as.factor(newdata$attend)
predict(party.glm, newdata, type = "response")
GSS <- read.table("~/Desktop/Math 325 Notebook/Data/GSS2012.csv", header=TRUE, quote="\"")
GSSc <- GSS[,c("partyid", "age", "sex", "race", "degree", "attend")]
GSSc$sex <- as.factor(GSSc$sex)
GSSc$race <- as.factor(GSSc$race)
GSSc$degree <- as.factor(GSSc$degree)
GSSc$attend <- as.factor(GSSc$attend)
GSSc$partyid <- as.factor(GSSc$partyid)
GSSc <- subset(GSSc, partyid %in% 1:7)
levels(GSSc$partyid) <- list(Democrat = c(0, 1, 2), Republican = c(4, 5, 6))
GSSc <- subset(GSSc, partyid %in% c("Democrat","Republican"))
dim(GSSc)
GSSc <- subset(GSSc, degree %in% 0:4)
dim(GSSc)
GSSc <- subset(GSSc, attend %in% 0:8)
GSSc$attend <- factor(GSSc$attend)
barplot(table(GSSc$partyid), xlab="partyid", col = c("blue", "red"))
barplot(table(GSSc$age), xlab="age")
barplot(table(GSSc$sex), xlab="sex")
barplot(table(GSSc$race), xlab="race")
barplot(table(GSSc$degree), xlab="degree")
barplot(table(GSSc$attend), xlab="church attendance")
party.glm <- glm(partyid ~  age + sex + race + degree + attend, data = GSSc, family = binomial)
summary(party.glm)
hoslem.test(party.glm$y, party.glm$fitted)
pR2(party.glm)
regTermTest(party.glm, "age")
varImp(party.glm)
newdata <- data.frame(age=25, sex=1, race=1, degree=3, attend=7)
newdata$sex <- as.factor(newdata$sex)
newdata$race <- as.factor(newdata$race)
newdata$degree <- as.factor(newdata$degree)
newdata$attend <- as.factor(newdata$attend)
predict(party.glm, newdata, type = "response")
getwd()
getwd()
getwd()
plot(partyid == "Republican" ~ age, data=GSSc, pch=16, cex=0.5, xlim=c(18,110), ylab="Republican Party Afiliation")
curve(exp(-0.878804 + 0.004989*x)/(1+exp(-0.878804 + 0.004989*x)), from=18, to=88, add=TRUE, col='firebrick')
curve(exp(-0.878804 - 0.288434 + 0.004989*x)/(1+exp(-0.878804 - 0.288434+ 0.004989*x)), from=18, to=88, add=TRUE, col='skyblue')
curve(exp(-0.878804 -2.322870  + 0.004989*x)/(1+exp(-0.878804 - 2.322870 + 0.004989*x)), from=18, to=88, add=TRUE, col='green')
newdata <- data.frame(age=22, sex=1, race=1, degree=3, attend=7)
newdata$sex <- as.factor(newdata$sex)
newdata$race <- as.factor(newdata$race)
newdata$degree <- as.factor(newdata$degree)
newdata$attend <- as.factor(newdata$attend)
predict(party.glm, newdata, type = "response")
plot(partyid == "Republican" ~ age, data=GSSc, pch=16, cex=0.5, xlim=c(18,110), ylab="Republican Party Afiliation")
predict(party.glm, newdata, type = "response")
barplot(table(GSSc$age), xlab="age")
legend("bottomright", legend=("Pray ==", 1:6), col=c("firebrick","skyblue","skyblue3","orchid","wheat3","skyblue4"), lty=1)
legend("bottomright", legend=("Pray ==", 1:6), col=c("firebrick","skyblue","skyblue3","orchid","wheat3","skyblue4"), lty=1))
legend("bottomright", "Pray ==", 1:6, col=c("firebrick","skyblue","skyblue3","orchid","wheat3","skyblue4"), lty=1))
legend("bottomright", c("Age", "Sex", "Race", "Degree", "Attend"))
legend("bottomright", c("age", "sex", "race", "degree", "attend"), lty=c(1,1,1,1,1), lwd=c(2.5,2.5),col=c(“firebrick”,”skyblue”,"green","purple", "orange")))
legend("bottomright", c("age", "sex", "race", "degree", "attend"), lty=c(1,1,1,1,1), lwd=c(2.5,2.5),col=c("firebrick","skyblue","green","purple", "orange")))
legend("bottomright", c("age", "sex", "race", "degree", "attend"), lty=c(1,1,1,1,1), lwd=c(2.5,2.5),col=c("firebrick","skyblue","green","purple", "orange")))
legend("bottomright", c("age", "sex", "race", "degree", "attend"), lty=c(1,1,1,1,1), lwd=c(2.5,2.5),col=c("firebrick","skyblue","green","purple", "orange"))
party.glm <- glm(partyid ~  age + sex + race + degree + attend, data = GSSc, family = binomial)
summary(party.glm)
exp(-.288434)
exp(1.453542)
exp(-2.322870)
library(lmtest)
library(mosaic)
library(MASS)
library(forecast)
data <- read.csv(file = "~/Desktop/HousingStarts.csv")
View(data)
plot(data)
attach(data)
fit <- auto.arima(NHSPSTOT, xreg=cbind(DUK.US, MTH.US, USURTOT, USHBMIDX, PG.E))
summary(fit)
ts(data)
housing.lm <- lm(NHSPSTOT ~ DUK.US + MTH.US + USURTOT + USHBMIDX + PG.E, data = data, weights = )
summary(housing.lm)
par(mfrow = c(1:2))
plot(housing.lm, which = 1:2)
par(mfrow = c(1,1))
bptest(housing.lm)
shapiro.test(housing.lm$residuals)
qqPlot(housing.lm$residuals)
p1 <- powerTransform(housing.lm)
coef(p1, round=TRUE)
m1 <- lm(bcPower(NHSPSTOT, p1$roundlam) ~ DUK.US + MTH.US + USURTOT + USHBMIDX + PG.E, data = data)
summary(m1)
par(mfrow = c(1:2))
plot(m1, which = 1:2)
par(mfrow = c(1,1))
bptest(m1)
shapiro.test(m1$residuals)
qqPlot(m1$residuals)
plot.ts(m1)
?plot.ts
plot.ts(m1$residuals)
GDP <- read.csv(file = "~/Desktop/GDP.csv")
GDP <- read.csv(file = "~/Desktop/GDP.csv")
View(GDP)
attach(GDP)
GDP.lm <- lm(GDP ~ NAPMINV + LET.TOTL + FEDL01, data = GDP)
summary(GDP.lm)
plot(GDP.lm, which = 1:2)
par(mfrow = c(1,1))
GDP.lm <- lm(GDP ~ NAPMINV + LET.TOTL + FEDL01, data = GDP)
summary(GDP.lm)
par(mfrow = c(1:2))
plot(GDP.lm, which = 1:2)
par(mfrow = c(1,1))
bptest(GDP.lm)
shapiro.test(GDP.lm$residuals)
qqPlot(GDP.lm$residuals)
?box.cox
boxcox()
boxcox(GDP.lm)
p1 <- powerTransform(GDP.lm)
coef(p1, round=TRUE)
m1 <- lm(bcPower(GDP, p1$roundlam) ~ NAPMINV + LET.TOTL + FEDL01, data = data)
summary(m1)
m1 <- lm(bcPower(GDP, p1$roundlam) ~ NAPMINV + LET.TOTL + FEDL01, data = GDP)
summary(m1)
par(mfrow = c(1:2))
plot(m1, which = 1:2)
par(mfrow = c(1,1))
summary(m1)
par(mfrow = c(1:2))
plot(m1, which = 1:2)
par(mfrow = c(1,1))
bptest(m1)
shapiro.test(m1$residuals)
qqPlot(m1$residuals)
m1 <- lm(bcPower(log(GDP), p1$roundlam) ~ NAPMINV + LET.TOTL + FEDL01, data = GDP)
summary(m1)
par(mfrow = c(1:2))
plot(m1, which = 1:2)
par(mfrow = c(1,1))
bptest(m1)
shapiro.test(m1$residuals)
m1 <- lm(bcPower(GDP, p1$roundlam) ~ NAPMINV + LET.TOTL + FEDL01, data = GDP)
summary(m1)
par(mfrow = c(1:2))
plot(m1, which = 1:2)
par(mfrow = c(1,1))
bptest(m1)
shapiro.test(m1$residuals)
qqPlot(m1$residuals)
plot.ts(m1$residuals)
bptest(m1)
shapiro.test(m1$residuals)
p1 <- powerTransform(housing.lm)
coef(p1, round=TRUE)
m1 <- lm(bcPower(NHSPSTOT, p1$roundlam) ~ DUK.US + MTH.US + USURTOT + USHBMIDX + PG.E, data = data)
summary(m1)
par(mfrow = c(1:2))
plot(m1, which = 1:2)
par(mfrow = c(1,1))
bptest(m1)
shapiro.test(m1$residuals)
wi <- 1/housing.lm$residuals^2
housing.wlm <- lm(NHSPSTOT ~ DUK.US + MTH.US + USURTOT + USHBMIDX + PG.E, data = data, weights = wi)
summary(housing.wlm)
housing.lm <- lm(NHSPSTOT ~ DUK.US + MTH.US + USURTOT + USHBMIDX + PG.E, data = data)
summary(housing.lm)
par(mfrow = c(1:2))
plot(housing.wlm, which = 1:2)
par(mfrow = c(1,1))
bptest(housing.lm)
shapiro.test(housing.lm$residuals)
housing.lm <- lm(NHSPSTOT ~ DUK.US + MTH.US + USURTOT + USHBMIDX + PG.E, data = data)
summary(housing.lm)
par(mfrow = c(1:2))
plot(housing.wlm, which = 1:2)
par(mfrow = c(1,1))
bptest(housing.lm)
shapiro.test(housing.lm$residuals)
library(lmtest)
library(mosaic)
library(MASS)
library(forecast)
data <- read.csv(file = "~/Desktop/HousingStarts.csv")
View(data)
plot(data)
attach(data)
housing.lm <- lm(NHSPSTOT ~ DUK.US + MTH.US + USURTOT + USHBMIDX + PG.E, data = data)
summary(housing.lm)
par(mfrow = c(1:2))
plot(housing.wlm, which = 1:2)
library(lmtest)
library(mosaic)
library(MASS)
library(forecast)
data <- read.csv(file = "~/Desktop/HousingStarts.csv")
View(data)
plot(data)
attach(data)
housing.lm <- lm(NHSPSTOT ~ DUK.US + MTH.US + USURTOT + USHBMIDX + PG.E, data = data)
summary(housing.lm)
par(mfrow = c(1:2))
plot(housing.wlm, which = 1:2)
par(mfrow = c(1,1))
bptest(housing.lm)
shapiro.test(housing.lm$residuals)
qqPlot(housing.lm$residuals)
plot(housing.wlm, which = 1:2)
plot(housing.lm, which = 1:2)
summary(housing.lm)
par(mfrow = c(1:2))
plot(housing.lm, which = 1:2)
par(mfrow = c(1,1))
bptest(housing.lm)
shapiro.test(housing.lm$residuals)
qqPlot(housing.lm$residuals)
p1 <- powerTransform(housing.lm)
coef(p1, round=TRUE)
m1 <- lm(bcPower(NHSPSTOT, p1$roundlam) ~ DUK.US + MTH.US + USURTOT + USHBMIDX + PG.E, data = data)
summary(m1)
par(mfrow = c(1:2))
plot(m1, which = 1:2)
par(mfrow = c(1,1))
bptest(m1)
shapiro.test(m1$residuals)
qqPlot(m1$residuals)
plot.ts(m1$residuals)
getwd()
getwd()
library(mosaic)
View(Salaries)
tbl = table(Salaries$rank, Salaries$sex)
chisq.test(tbl)
salaries <- chisq.test(tbl)
salaries$expected
salaries$residuals
tbl = table(Salaries$discipline, Salaries$sex)
chisq.test(tbl)
tbl = table(Salaries$sex, Salaries$discipline)
chisq.test(tbl)
discrimination <- matrix(c(89,79,297,118,130,350,241,140,248,37,59,197),nrow = 4,ncol = 3, byrow = T)
print(discrimination)
colnames(discrimination) <- c("Agree", "Undecided", "Disagree")
rownames(discrimination) <- c("East","Midwest","South","West")
print(discrimination)
chisq.test(discrimination)
?beside
?barplot
barplot(discrimination, beside = T, legend.text = T
, args.legend = list(x = "topleft"), col = c('blue', 'red'), ylim = c(0,1000))
barplot(discrimination, beside = T, legend.text = T
, args.legend = list(x = "topleft"), col = c("#AA4488", "#CC99BB", "#114477", "#4477AA"), ylim = c(0,1000))
chisq.test(discrimination)
barplot(discrimination, beside = T, legend.text = T
, args.legend = list(x = "topleft"), col = c("#AA4488", "#CC99BB", "#114477", "#4477AA"), ylim = c(0,400))
barplot(discrimination, beside = T, legend.text = T
, args.legend = list(x = "center"), col = c("#AA4488", "#CC99BB", "#114477", "#4477AA"), ylim = c(0,400))
, args.legend = list(x = "topcenter"), col = c("#AA4488", "#CC99BB", "#114477", "#4477AA"), ylim = c(0,400))
barplot(discrimination, beside = T, legend.text = T
, args.legend = list(x = "topcenter"), col = c("#AA4488", "#CC99BB", "#114477", "#4477AA"), ylim = c(0,400))
barplot(discrimination, beside = T, legend.text = T
, args.legend = list(x = "topleft"), col = c("#AA4488", "#CC99BB", "#114477", "#4477AA"), ylim = c(0,400))
dis.chi <- chisq.test(discrimination)
dis.chi$expected > 5
dis.chi <- chisq.test(discrimination)
barplot(discrimination, beside = T, legend.text = T
, args.legend = list(x = "topleft"), main = "Discrimination vs Geographic Loaction", col = c("#AA4488", "#CC99BB", "#114477", "#4477AA"), ylim = c(0,400))
dis.chi <- chisq.test(discrimination)
barplot(discrimination, beside = T, legend.text = T
, args.legend = list(x = "topleft"), main = "Discrimination vs. Geographic Location", col = c("#AA4488", "#CC99BB", "#114477", "#4477AA"), ylim = c(0,400))
dis.chi
library(mosaic)
tbl <- table(Salaries$rank, Salaries$sex)
test <- chisq.test(tbl)
test$expected
test$statistic
test
discrimination <- matrix(c(61941,158931,280772,111158,140126,242879,182166,116353,236018),nrow = 3,ncol = 3, byrow = T)
colnames(discrimination) <- c("Engineering", "Natural Science", "Social Science")
rownames(discrimination) <- c("US","WE","Asia")
discrimination
test <- chisq.test(discrimination)
test
shiny::runApp('Desktop/Computer Science/R/practice2')
summary(hoslem)
runApp('Desktop/Computer Science/R/practice2')
DR <- ggplot(data = GSSc, aes(x = partyid, fill = partyid))
url <-
"https://raw.githubusercontent.com/dylanjm/PartyID-Dataset/master/Data/PartyID.csv"
GSSc <- getURL(url)
GSSc <- read.csv(textConnection(GSSc))
#Make the variables factors
GSSc$sex <- as.factor(GSSc$sex)
GSSc$race <- as.factor(GSSc$race)
GSSc$degree <- as.factor(GSSc$degree)
GSSc$attend <- as.factor(GSSc$attend)
#Run Logistic Regression
party.glm <-
glm(partyid ~  age + sex + race + degree + attend,
data = GSSc,
family = binomial)
hoslem <-
hoslem.test(party.glm$y, party.glm$fitted)
summary <- summary(party.glm)
#Create Users Profile
PredictiveData <- reactive({
data.frame(
age = input$age,
sex = input$sex,
race = input$race,
degree = input$degree,
attend = input$chruch
)
})
partyPredict <- eventReactive(input$submit, {
newdata <- PredictiveData()
newdata$sex <- as.factor(newdata$sex)
newdata$race <- as.factor(newdata$race)
newdata$degree <- as.factor(newdata$degree)
newdata$attend <- as.factor(newdata$attend)
predict(party.glm, newdata, type = "response")
})
# Generate a summary of the dataset
output$answer <- renderPrint({
partyPredict()
})
print(summary)
print(hoslem)
DR <- ggplot(data = GSSc, aes(x = partyid, fill = partyid))
DR <- DR + geom_bar(stat = "count", position = position_dodge(),size = .3)
DR <- DR + guides(fill = F) + scale_fill_manual(values = c("#2d5986", "#cc0000"))
DR <- DR + xlab("") + ylab("Particpants") + ggtitle("Democrat or Republican")
AGE <- ggplot(data = GSSc, aes(x = age, fill = partyid))
AGE <- AGE + geom_bar(stat = "count", position = "stack",size = .3)
AGE <- AGE + guides(fill = F) + scale_fill_manual(values = c("#2d5986", "#cc0000"))
AGE <- AGE + xlab("") + ylab("Particpants") + ggtitle("Age of Participants") + xlim(18, 88)
SEX <- ggplot(data = GSSc, aes(x = sex, fill = partyid))
SEX <- SEX + geom_bar(stat = "count", position = "stack",size = .3)
SEX <- SEX + guides(fill = F) + scale_fill_manual(values = c("#2d5986", "#cc0000"),labels = c("Male", "Female"))
print(DR)
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
img(src='myImage.png', align = "right")
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
runApp('Desktop/Computer Science/R/practice2')
library(shiny)
runApp()
getwd()
setwd(/Volumes/Macintosh HD/Users/dylanmcdowell/Desktop/Computer Science/R/PartyID)
setwd("/Volumes/Macintosh HD/Users/dylanmcdowell/Desktop/Computer Science/R/PartyID")
getwd
getwd()
library(shiny)
runApp()
library(rsconnect)
deployApp()
shiny::runApp()
runApp()
runApp()
runApp()
slide1 <- img(src='Slide01.png')
print(slide1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
slideshow <- list(pres1 <- img(src='Slide01.png'),
pres2 <- img(src='Slide02.png'),
pres3 <- img(src='Slide03.png'),
pres4 <- img(src='Slide04.png'),
pres5 <- img(src='Slide05.png'),
pres6 <- img(src='Slide06.png'),
pres7 <- img(src='Slide12.png'),
pres9 <- img(src='Slide13.png'),
pres10 <- img(src='Slide14.png'))
slideshow
for(i in 1:slideshow){
local({
my_i <- i
imageName <- paste("pres", my_i, sep = "")
output[[imageName]] <- renderUI({
imageName
})
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
uiOutput(slide1)
runApp()
